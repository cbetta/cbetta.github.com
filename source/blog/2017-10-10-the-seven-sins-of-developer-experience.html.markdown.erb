---
title: "The 7 Sins of Developer Experience"
date: 2017-10-10 15:00 GMT
tags: developer experience
icon: map signs
---

This post is a write up of a talk given at [DevRelCon Tokyo 2017](tokyo-2017.devrel.net) and a few other events. Slides for this talk are [available on Speaker Deck](https://speakerdeck.com/cbetta/the-7-deadly-sins-of-developer-experience-devrelcon-tokyo).
{:.ui.message}

<div class="ui embed" data-source='youtube' data-id="5Frzvrq52fs" data-placeholder="<%= image_path '/images/slides/sins/sins.001.jpeg' %>
"></div>

<br>

We all ocassionally have one of these days. We want to use things, but we can't quite figure out how. The world is designed for us, it's so easy, yet once in a while with all good intent - we can't manage.

Doors are hard. Doors are really hard to deal with, especially glass doors, cause you can see right through them and unless there's a special sign on them it can be hard to see they're there.

Yet a lot of us have APis and SDKs, we sell products to developers. And those products are probably a lot harder than glass doors.

A lot harder, I think personally.

So, who am I?

My name is Cristiano. I am develper experience designer, I used to work at PayPal and Braintree. I am abig fan of dev experience, I like to write about it, looking at companies like Stripe, Github and look at how they take a developer from first signup  to first API call.

I also like to look at OSS projects, like the SDKs of these companies, what do they put in the documetation, etc.

And I work with companies small and large to help them improve their DX flow.

What I want to talk about today is DX and the worst things I've seen. To me DX is like Users are to UX, developers are like DX.

To quote Jennifer Riggens. <Insert quote>

I personally love the last part. Your users will always be experiencing your product, even when you did not put any time in your DX, even if your experience is rubbish.

For all of us who have an API or Dev Prod, developers are still going to have an experience and it's up to you to decide if that's a good one or a bad one.


So what is DX to me? To me, if you have a paltform you want a successful user on it. That's often the target, and for DP we can geeralize this to a successful developer.

Somewhere we start off with a fresh new developer, a dev who gets introduced to your prod and we take them on a journey to become a successful developer and on the long term we hope they have long term success as well.

That middle bit, that to me is DX. The journey from first landing on your site, your dev portal, your twitter, or even meetin gyou at a booth, to that successful integration. That moment that they have a successful product that ues your product. Everyone outside of that is either dev evangelis or dev advocacy. The marketing before, the support after.

In the middle, lives your product. If you think of it your product is made up of 2 different things. Your product is compromised of 2 different things. Your APIs, SDKs, software on one side, and the documentation that supports the software on the other side.

Those 2 things, they make your product. And a different way to think about it is that your APIs and SDKs are the tools you provide, and the documentation and support are the information to support these tools.

The gist of what I'm going to talk about today is how a lot of the information we provide to users is the problem. Not all information is created equal.

There is so much information that we write. Often it's too much, we give it to them too soon. We provide them too little when they do want it. We structure it badly, we badly support our own documentation, and sometimes its incomple or incorrect.

On the other side are the tools. Often we write tools over which we have no control.

And I don't know if you noticed, but those are 7 things. Which make for my 7 sins of developer experience.

So let's kick it off with #1

Too much information.

There's a concept called performance overload. Performance load is the idea that when we have a door, with a handle, there's 2 vectors of performance load on it. The first one is the physical load, it's the idea that there's a certain physical activity that I need to do. If it's aprticularly heavy handle or door, the physical load is higher than for an automatic sliding door.

The other load is the cognitive load. As it's a handle I can look at it and see a handle, which tells me that this is probably a door that will open, and it will probably open inwards. And how do we see that, we see that because of the handle.

We get cognitive dissonance when the UI'ssignifiers don't necessarily signify what you can do with them. For example, when we get a handle yet the door opens away from us there is a disconnect between what we expected and were allowed to do.

Now this one isn't so bad, as we see it more often, and repetition drives behaviour as well. It gets overloaded when you get to situations like this.

There is a handle in the middle, 2 bars, 4 signs. At this moment people might get overloaded, blocked, frustrated, and they will give up. They will walk away and try a different door.

And we see the same thing we see when we look at some websites.

I love amazon, I love their products, but this is overload. People look at this and go away and try something else.

See, cognitive overload is a situation where you as a teach give too much info or tasks to a learner at the same time resulting to the learner being unable to process all that information. It's above the limit at that time in one go.

There are some solutions to this. One of them is chunking. If you chunk by 8 items at a time they are more likely to be able to remember or understand that information.

And if you give them multiple chunks of chunks, they are more likely to remember a larger percentage of that information as well.

Amazon does this kinda in their UI, but they do it in a pretty poor way.

If you go to one of their other sites, their 10 minute guides site, they actually apply a different rule, the 80/20 rule.

This rule is the idea that users will use 20% of your product 80% of the time. Amazon recognises this, they prioritized the things people mostly do: compute, spin up a linux version, spin up a windows machine. Those are the things most people want to do, regardless of what they want to do. So put those things first, rather than the other 80% of features.

Number 2

Information: Too soon

It's kind of Cognitive Load part 2.

Do we all recognize this?

It's a fire alarm. The thing we break in the case of a fire.

And it's kind of cool. It has a low cognitive performance load, it takes little to understand what it does. Yet it has a medium physical load, you need to press relatively hard to breakd the glass.

The reason why we do that is to prevent abuse. You can't accidentally lean against the button to set of the alarm, you relaly need to press harder than that.

Now we do the same in UI with confirmation dialogs. Are you sure you want to continue? It's low cognitive load, yes I really wanted to do this. Yet, it still requires some extra physical load to click a button, again.

That's a good example of putting cognitive load in the way of users. Yet often we put CGL in the way at the wrong time, and often with forms.

For example, let's take this simple field asking for your name. Seems pretty simple right? Yet the moment we put that little star on it we make this field mandatory, and with that come a lot f questions. Who can see this? Do I fill in my actual name or fake name? Can I change it later? Do I use the name in my passport or the name I use in public?

Now this is a relatively easy one, but when we sign up for dev products we often ask these kind of questions. "I am a developer/designer/business owner".

Same question again? Can I change this later? What if I am more than one? If I pick business owner will I still get API keys? I don't know!

All of that is cognitive load. All those questions that people are asking make it hard for people to continue.

So I like what people does on their sign up. They ask you what plan you want, and if you want to set up an org.

And org is a weird one to ask. Cause when I sign up to GH and have no experience with GH I have no idea what an org is.

So I first have to understand what an org is before I can make a decision on whether I want to set one up.  Which is what a mental model is. We have to make sure that the way your user thinks your product works is in sync with how it qctually works. And when these things are not in sync, it becomes really hard for somebody to reason about how to use your product.

<Insert Mental Model Quote>

So what GH does in this situation, they put some help text under it to help you make an educated decision. Now the org is an optional choice, it's a checkbox, so the hurdle isn't very high, you can ignore it.

Now for the personal vs paid plan question you actually have to decide there and then. That's a touugh one. The same questons come up again: can I change this later? Which one do I want?

Luckily GH puts some text in place under it to say "dont worry, you can cancel or upgrade at any time". That takes the load away to make a decision at that time, to remove the feeling that you are being forced into anything, and allows everyone to continue.

It's interesting that this is the second screen of signup, not the first. It's the idea of progressive disclosure.

<Insert Quote>

What happens here is that when you sign up it only asks for a username, email, password. Nothing else. Those are really low cognitive load quetions. I know what my standard username is, my email, and we all use theh same password everywhere, right?

And then only after that, after I'm signed up they start asking the hard questions.

All the hard questions are postponed.

Number 3 (17:40)

Information withotu structure. When we read a book, there's a lot of structure in a book. We have the page numbers, the current chapter at the top quite often, the toc somewhere at the front of the book. the index at the back. We can flip to the next page just by pulling the corner, and we can flip to the previous page just by pulling the other corner.

All those things help me understand where I am in a book. What page am I on? I can look at a book and see approximately how far through I am.

It tells me where I can go. I can go to the next page or previous page, or I can look at the index and toc to see what chapters there are.

And I can see where I came from, I can see what pages came first and what came after.

All of that is the idea of signposting. And we do this online all the time.

If you look at most websites, you'll see some navigation at the top. The navigation tends to be there and as we move across to different pages it tends to stay there.

We will have links, that tell us "you can click here". And when we click on one of those the navigation might change to tell us that we are now in a different section.

Yet a lot of websites that I deal with are missing that basic structure that tells us where we are at any point. That tells us where we can go, where we came from, and how we can go back.

A great way to show you where you are within a website for developers is with breadcrumbs. On this facebook page I can see that we are within the docs for games section, and on this page i can get an outline of all the sections in this page specifically.

This kind of design goes hand in hand with a design principle called the Guttenberg Diagram. It's a diagram that describes the general pattern followed by the eyes when looking at evenly distributed, homogenous information. 

In most of the western world, this will look something like this for an average website. You get that F shape focussing on the top left, with less and less attention as we go more to the bottom right of the page.

And this is why you generally find all the navigation on the top and left. With the main content in the middle of the page, because this is where people expect that content according to the guttenberg diagram.

So if you want to structure your site to have the right signposting, then those are the places where they will look for that information. Only people with very high motivation will scroll all the way to the footer and look there for the content they are looking for.

They might only do so after they have given up looking in the other places.

Number 4

Too little information

Too late

We write a lot of documentation. We love writing documentation. I feel like documentation is a bit like ductape. Once you have it, you want to use it for everything.

It's a bit like where we have something that's broken, and rather than aiming for perfection, for a fix, we settle for something that's just good enough.

And we see this a lot with doors. When people are having trouble with doors we don't tend to fix the UX, we just put up a note. We add more documentation.

And more documentation is not always better.

This is a website I recently looked at. And this is 1 of their over 600 pages of documentation.

We do pretty clever thigns with documentation, where we might have some product, which does something awesome. But with this you need to be very specific.

So we add a little warning note to inform a developer of our peculiar product.

This looks like progressive disclosure, the thing we talked about before where we are telling people about the things they need to know when they need to know.

But that's not what's really happening here. It's more like progressive revalation, where we only provide people with the documentation when they run into the error and try and find a solution in the documentation.

Where ideally what we should be doing is solving the product. We should look at the product and update the API or SDK to be more forgiving and understanding of the developer intent.

That's actually using the documentation to inform, not just for it to support the constrains in your product.

Number 5
 
Information without flow

I hate get started buttons, because 90% of the time they go straight from the button to the bin bucket.

When I first looked at sendgrid they took you from Get Started to signup to a page whith no context. They just left you hanging. It's like all they wanted to get was your email. Not useful

We are all trying to tell stories within devrel, stories about how are products are great and how they can make our customers successful. 

So story telling is essential when we take people on that adventure of making their first API call. When we look at Pusher, they actually do take you from Signup, to creating your first application, all the way to making that first API call in your programming language.


They take you from get Started all the way to success.

And i feel like often we don't know what success means. is it getting an email address? Probably not.

is it getting developers to make their first APi call? Probably neither.

Is it a paying user? Probably neither.

Is it having a successful user? Probably yeah!

Having a successful user is super important. Cause if you won't have customer success you won't be successful either.

Number 6

Incomplete information

If you go to GitHub and search for "documentation mistake" you will find 43000 issues. If you search for "typo" you will find 614.000 issues. 

I had this problem with Ember where they were on version 2.12. But if you go to 2.0 it will tel you that you are on an old guide. Yet if you went to search for ember router you would end up on the 1.0 documentation, which had no mention of this being an old version of the docs. This is where developers get frustrated, where developers waste time, and where they will go away and try out your competitor.

It's really important to test your documentation. We often test our code, but do we test our docs? There's a great blog post by GitLab about how they ship their product and documentation hand in hand. 

Number 7

Out of control tools. Quite often I see companies who do not own their own SDKs. 

PayPal did [26:27]





<%= slide_image 'sins', 2 %>
